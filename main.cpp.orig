#include <Arduino.h>
#include <squirrel.h>
#include <SdFat.h>

#include <sys/types.h>
#include <stdlib.h>

const uint8_t chipSelect = 15;
SdFat sd;
ArduinoOutStream cout(Serial);


extern "C" {
    int _getpid() {
        return 1;
    }

    int _kill(int pid, int sig) {
        return(-1);
    }

}

void printfunc(HSQUIRRELVM v,const SQChar *s,...)
{
    va_list vl;
    va_start(vl, s);
	cout << "Printing: ";
    cout << s << endl;
    va_end(vl);
}

void errorfunc(HSQUIRRELVM v,const SQChar *s,...)
{
    va_list vl;
    va_start(vl, s);
    cout << s;
    va_end(vl);
}

SQInteger file_read(SQUserPointer file,SQUserPointer buf,SQInteger size)
{
	ifstream* pfile = (ifstream*)file;
	SQInteger ret;
	ret = pfile->read(buf, size);
	if(ret != 0)
		return ret;
	return -1;
}


int main()
{
    Serial.begin(115200);

	delay(3000);
    SQInteger retval=0;
    HSQUIRRELVM v;
    v = sq_open(1024); // creates a VM with initial stack size 1024

    while(!sd.begin(chipSelect, SPI_HALF_SPEED))
    {
        Serial.println("error opening card");
        digitalWrite(13, HIGH);
        delay(300);
        digitalWrite(13, LOW);
        delay(300);
    }

        ifstream file("SCRIPT");

        if (!file.is_open()) sd.errorHalt("open failed");

		cout << "delaying" << endl;
        delay(500);
		cout << "delay complete" << endl;

		if(!SQ_SUCCEEDED(sq_readclosure(v,file_read,&file))) {
			
			while(1)
			{
				cout << "read closure failed" << endl;
				delay(1000);
			}
		}

        sq_setprintfunc(v, printfunc,errorfunc); //sets the print function

			sq_pushroottable(v); //push the root table(were the globals of the script will be stored)
    while(1)
    {
        if(SQ_SUCCEEDED(sq_call(v,1,SQTrue,SQTrue))) 
		{
				cout << "Succeeded" << endl;
           }
		else
			cout << "did not succeed" << endl;
		delay(1000);
        
    }

}


